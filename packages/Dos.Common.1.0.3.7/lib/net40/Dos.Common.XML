<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dos.Common</name>
    </assembly>
    <members>
        <member name="T:Dos.Common.CommonExpand">
            <summary>
            通用扩展
            </summary>
        </member>
        <member name="M:Dos.Common.CommonExpand.IsGuid(System.String)">
            <summary>
            是否是Guid
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.CommonHelper">
            <summary>
            通用Helper
            </summary>
        </member>
        <member name="M:Dos.Common.CommonHelper.GetChineseSpell(System.String)">
            <summary>
            获取汉字首字母（可包含多个汉字）
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonHelper.GetInitial(System.String)">
            <summary>
            获取第一个汉字的首字母，只能输入汉字
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonHelper.SimilarityRate(System.String,System.String)">
            <summary>
            计算相似度。
            </summary>
        </member>
        <member name="M:Dos.Common.CommonHelper.Minimum(System.Int32,System.Int32,System.Int32)">
            <summary>
            取三个数中的最小值
            </summary>
        </member>
        <member name="T:Dos.Common.CommonHelper.SimilarityResult">
            <summary>
            计算结果
            </summary>
        </member>
        <member name="F:Dos.Common.CommonHelper.SimilarityResult.Rate">
            <summary>
            相似度，0.54即54%。
            </summary>
        </member>
        <member name="F:Dos.Common.CommonHelper.SimilarityResult.ComputeTimes">
            <summary>
            对比次数
            </summary>
        </member>
        <member name="F:Dos.Common.CommonHelper.SimilarityResult.ExeTime">
            <summary>
            执行时间，毫秒
            </summary>
        </member>
        <member name="T:Dos.Common.Types">
            <summary>
            常用类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Object">
            <summary>
            Object 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Type">
            <summary>
            Type 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.String">
            <summary>
            Stirng 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Char">
            <summary>
            Char 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Boolean">
            <summary>
            Boolean 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Byte">
            <summary>
            Byte 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.ByteArray">
            <summary>
            Byte 数组类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.SByte">
            <summary>
            SByte 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Int16">
            <summary>
            Int16 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.UInt16">
            <summary>
            UInt16 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Int32">
            <summary>
            Int32 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.UInt32">
            <summary>
            UInt32 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Int64">
            <summary>
            Int64 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.UInt64">
            <summary>
            UInt64 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Double">
            <summary>
            Double 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Single">
            <summary>
            Single 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Decimal">
            <summary>
            Decimal 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Guid">
            <summary>
            Guid 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DateTime">
            <summary>
            DateTime 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.TimeSpan">
            <summary>
            TimeSpan 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Nullable">
            <summary>
            Nullable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.ValueType">
            <summary>
            ValueType 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Void">
            <summary>
            void 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DBNull">
            <summary>
            DBNull 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Delegate">
            <summary>
            Delegate 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.ByteEnumerable">
            <summary>
            ByteEnumerable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IEnumerableofT">
            <summary>
            IEnumerable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IEnumerable">
            <summary>
            IEnumerable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IListSource">
            <summary>
            IListSource 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDictionary">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDictionaryOfT">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DictionaryOfT">
            <summary>
            Dictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.StringDictionary">
            <summary>
            StringDictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.NameValueCollection">
            <summary>
            NameValueCollection 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDataReader">
            <summary>
            IDataReader 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DataTable">
            <summary>
            DataTable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DataRow">
            <summary>
            DataRow 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDictionaryOfStringAndObject">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDictionaryOfStringAndString">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="T:EmitMapper.AST.Nodes.AstIfNull">
            <summary>
            Generates "value ?? ifNullValue" expression.
            </summary>
        </member>
        <member name="T:EmitMapper.MappingConfiguration.ICustomConverterProvider">
            <summary>
            Provider for getting detailed information about generic conversion
            </summary>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.ICustomConverterProvider.GetCustomConverterDescr(System.Type,System.Type,EmitMapper.MappingConfiguration.MapConfigBaseImpl)">
            <summary>
            Getting detailed information about generic conversion
            </summary>
            <param name="from">Type of source. Can be also generic class or abstract array.</param>
            <param name="to">Type of destination. Can be also generic class or abstract array.</param>
            <param name="mappingConfig">Current mapping configuration</param>
            <returns></returns>
        </member>
        <member name="T:EmitMapper.DynamicAssemblyManager">
            <summary>
            Class which maintains an assembly for created object Mappers
            </summary>
        </member>
        <member name="M:EmitMapper.DynamicAssemblyManager.SaveAssembly">
            <summary>
            Saves assembly with created Mappers to file. This method is useful for debugging purpose.
            </summary>
        </member>
        <member name="M:EmitMapper.EmitBuilders.BuilderUtils.InitializeLocal(System.Reflection.Emit.LocalBuilder,System.Int32)">
            <summary>
            Copies an argument to local variable
            </summary>
            <param name="loc"></param>
            <param name="argIndex"></param>
            <returns></returns>
        </member>
        <member name="T:EmitMapper.Mappers.ObjectsMapperBaseImpl">
            <summary>
            Base class for Mappers
            </summary>
        </member>
        <member name="M:EmitMapper.Mappers.ObjectsMapperBaseImpl.Map(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <param name="from">Source object</param>
            <param name="to">Destination object</param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitMapper.Mappers.ObjectsMapperBaseImpl.Map(System.Object)">
            <summary>
            Creates new instance of destination object and initializes it by values from "from" object
            </summary>
            <param name="from">source object</param>
            <returns></returns>
        </member>
        <member name="F:EmitMapper.Mappers.ObjectsMapperBaseImpl.mapperMannager">
            <summary>
            Mapper manager
            </summary>
        </member>
        <member name="F:EmitMapper.Mappers.ObjectsMapperBaseImpl.typeFrom">
            <summary>
            Type of source object
            </summary>
        </member>
        <member name="F:EmitMapper.Mappers.ObjectsMapperBaseImpl.typeTo">
            <summary>
            Type of destination object
            </summary>
        </member>
        <member name="F:EmitMapper.Mappers.ObjectsMapperBaseImpl.ShallowCopy">
            <summary>
            True, if reference properties and members of same type should
            be copied by reference (shallow copy, without creating new instance for destination object)
            </summary>
        </member>
        <member name="M:EmitMapper.Mappers.ObjectsMapperBaseImpl.MapImpl(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <param name="from">Source object</param>
            <param name="to">Destination object</param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitMapper.Mappers.ObjectsMapperBaseImpl.CreateTargetInstance">
            <summary>
            Creates an instance of destination object
            </summary>
            <returns>Destination object</returns>
        </member>
        <member name="T:EmitMapper.Mappers.MapperForClassImpl">
            <summary>
            Mapper for classes
            </summary>
        </member>
        <!-- 对于成员“T:EmitMapper.Mappers.MapperForCollectionImpl”忽略有格式错误的 XML 注释 -->
        <member name="M:EmitMapper.Mappers.MapperForCollectionImpl.MapImpl(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <param name="from">Source object</param>
            <param name="to">Destination object</param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitMapper.Mappers.MapperForCollectionImpl.Map(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <param name="from">Source object</param>
            <param name="to">Destination object</param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitMapper.Mappers.MapperForCollectionImpl.IsSupportedType(System.Type)">
            <summary>
            Returns true if specified type is supported by this Mapper
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.Mappers.MapperForCollectionImpl.CreateInstance(System.String,EmitMapper.ObjectMapperManager,System.Type,System.Type,EmitMapper.ObjectsMapperDescr,EmitMapper.IMappingConfigurator)">
            <summary>
            Creates an instance of Mapper for collections.
            </summary>
            <param name="MapperName">Mapper name. It is used for registration in Mappers repositories.</param>
            <param name="mapperMannager">Mappers manager</param>
            <param name="TypeFrom">Source type</param>
            <param name="TypeTo">Destination type</param>
            <param name="SubMapper"></param>
            <returns></returns>
        </member>
        <member name="T:EmitObjectMapper.Mappers.MapperPrimitiveImpl">
            <summary>
            Mapper for primitive objects
            </summary>
        </member>
        <member name="M:EmitObjectMapper.Mappers.MapperPrimitiveImpl.MapImpl(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <param name="from">Source object</param>
            <param name="to">Destination object</param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitObjectMapper.Mappers.MapperPrimitiveImpl.CreateTargetInstance">
            <summary>
            Creates an instance of destination object
            </summary>
            <returns>Destination object</returns>
        </member>
        <member name="T:EmitMapper.MappingConfiguration.CustomConverterDescriptor">
            <summary>
            Detailed description of a generic converter. 
            </summary>
        </member>
        <member name="P:EmitMapper.MappingConfiguration.CustomConverterDescriptor.ConverterImplementation">
            <summary>
            Type of class which performs conversion. This class can be generic which will be parameterized with types 
            returned from "ConverterClassTypeArguments" property.
            </summary>
        </member>
        <member name="P:EmitMapper.MappingConfiguration.CustomConverterDescriptor.ConversionMethodName">
            <summary>
            Name of conversion method of class returned from "ConverterImplementation" property.
            </summary>
        </member>
        <member name="P:EmitMapper.MappingConfiguration.CustomConverterDescriptor.ConverterClassTypeArguments">
            <summary>
            Type arguments for parameterizing generic converter determined by "ConverterImplementation" property.
            </summary>
        </member>
        <member name="M:EmitMapper.IMappingConfigurator.GetMappingOperations(System.Type,System.Type)">
            <summary>
            Get list of mapping operations. Each mapping mapping defines one copieng operation from source to destination. For this operation can be additionally defined the following custom operations: 
            - Custom getter which extracts values from source
            - Custom values converter which converts extracted from source value
            - Custom setter which writes value to destination
            </summary>
            <param name="from">Source type</param>
            <param name="to">Destination type</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.IMappingConfigurator.GetConfigurationName">
            <summary>
            Get unique configuration name to force Emit Mapper create new mapper instead using appropriate cached one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.ConvertUsing``2(System.Func{``0,``1})">
            <summary>
            Define custom type converter
            </summary>
            <typeparam name="From">Source type</typeparam>
            <typeparam name="To">Destination type</typeparam>
            <param name="converter">Function which converts an inctance of the source type to an instance of the destination type</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.ConvertGeneric(System.Type,System.Type,EmitMapper.MappingConfiguration.ICustomConverterProvider)">
            <summary>
            Define conversion for a generic. It is able to convert not one particular class but all generic family
            providing a generic converter.
            </summary>
            <param name="from">Type of source. Can be also generic class or abstract array.</param>
            <param name="to">Type of destination. Can be also generic class or abstract array.</param>
            <param name="converterProvider">Provider for getting detailed information about generic conversion</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.NullSubstitution``2(System.Func{System.Object,``1})">
            <summary>
            Setup function which returns value for destination if appropriate source member is null. 
            </summary>
            <typeparam name="TFrom">Type of source member</typeparam>
            <typeparam name="TTo">Type of destination member</typeparam>
            <param name="nullSubstitutor">Function which returns value for destination if appropriate source member is null</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.IgnoreMembers(System.Type,System.Type,System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <param name="typeFrom">Source type for which ignore members are defining</param>
            <param name="typeTo">Destination type for which ignore members are defining</param>
            <param name="ignoreNames">Array of member names which should be ingored</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.IgnoreMembers``2(System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <typeparam name="TFrom">Source type for which ignore members are defining</typeparam>
            <typeparam name="TTo">Destination type for which ignore members are defining</typeparam>
            <param name="ignoreNames">Array of member names which should be ingored</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.ConstructBy``1(EmitMapper.MappingConfiguration.MappingOperations.TargetConstructor{``0})">
            <summary>
            Define a custom constructor for the specified type
            </summary>
            <typeparam name="T">Type for which constructor is defining</typeparam>
            <param name="constructor">Custom constructor</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.PostProcess``1(EmitMapper.MappingConfiguration.MappingOperations.ValuesPostProcessor{``0})">
            <summary>
            Define postprocessor for specified type
            </summary>
            <typeparam name="T">Objects of this type and all it's descendants will be postprocessed</typeparam>
            <param name="postProcessor"></param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.SetConfigName(System.String)">
            <summary>
            Set unique configuration name to force Emit Mapper create new mapper instead using appropriate cached one.
            </summary>
            <param name="mapperName">Configuration name</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.ConvertUsing``2(System.Func{``0,``1})">
            <summary>
            Define custom type converter
            </summary>
            <typeparam name="From">Source type</typeparam>
            <typeparam name="To">Destination type</typeparam>
            <param name="converter">Function which converts an inctance of the source type to an instance of the destination type</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.ConvertGeneric(System.Type,System.Type,EmitMapper.MappingConfiguration.ICustomConverterProvider)">
            <summary>
            Define conversion for a generic. It is able to convert not one particular class but all generic family
            providing a generic converter.
            </summary>
            <param name="from">Type of source. Can be also generic class or abstract array.</param>
            <param name="to">Type of destination. Can be also generic class or abstract array.</param>
            <param name="converterProvider">
            Provider for getting detailed information about generic conversion.
            </param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.NullSubstitution``2(System.Func{System.Object,``1})">
            <summary>
            Setup function which returns value for destination if appropriate source member is null. 
            </summary>
            <typeparam name="TFrom">Type of source member</typeparam>
            <typeparam name="TTo">Type of destination member</typeparam>
            <param name="nullSubstitutor">Function which returns value for destination if appropriate source member is null</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.IgnoreMembers(System.Type,System.Type,System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <param name="typeFrom">Source type for which ignore members are defining</param>
            <param name="typeTo">Destination type for which ignore members are defining</param>
            <param name="ignoreNames">Array of member names which should be ingored</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.IgnoreMembers``2(System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <typeparam name="TFrom">Source type for which ignore members are defining</typeparam>
            <typeparam name="TTo">Destination type for which ignore members are defining</typeparam>
            <param name="ignoreNames">Array of member names which should be ingored</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.ConstructBy``1(EmitMapper.MappingConfiguration.MappingOperations.TargetConstructor{``0})">
            <summary>
            Define a custom constructor for the specified type
            </summary>
            <typeparam name="T">Type for which constructor is defining</typeparam>
            <param name="constructor">Custom constructor</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.PostProcess``1(EmitMapper.MappingConfiguration.MappingOperations.ValuesPostProcessor{``0})">
            <summary>
            Define postprocessor for specified type
            </summary>
            <typeparam name="T">Objects of this type and all it's descendants will be postprocessed</typeparam>
            <param name="postProcessor"></param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.SetConfigName(System.String)">
            <summary>
            Set unique configuration name to force Emit Mapper create new mapper instead using appropriate cached one.
            </summary>
            <param name="mapperName">Configuration name</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.ShallowMap``1">
            <summary>
            Define shallow map mode for the specified type. In that case all members of this type will be copied by reference if it is possible
            </summary>
            <typeparam name="T">Type for which shallow map mode is defining</typeparam>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.ShallowMap(System.Type)">
            <summary>
            Define shallow map mode for the specified type. In that case all members of this type will be copied by reference if it is possible
            </summary>
            <param name="type">Type for which shallow map mode is defining</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.ShallowMap">
            <summary>
            Define default shallow map mode. In that case all members will be copied by reference (if it is possible) by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.DeepMap``1">
            <summary>
            Define deep map mode for the specified type. In that case all members of this type will be copied by value (new instances will be created)
            </summary>
            <typeparam name="T">Type for which deep map mode is defining</typeparam>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.DeepMap(System.Type)">
            <summary>
            Define deep map mode for the specified type. In that case all members of this type will be copied by value (new instances will be created)
            </summary>
            <param name="type">Type for which deep map mode is defining</param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.DeepMap">
            <summary>
            Define default deep map mode. In that case all members will be copied by value (new instances will be created) by default
            </summary>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.MatchMembers(System.Func{System.String,System.String,System.Boolean})">
            <summary>
            Define a function to test two members if they have identical names.
            </summary>
            <param name="membersMatcher">Function to test two members if they have identical names. For example if you want to match members ignoring case you can define the following function: (m1, m2) => m1.ToUpper() == m2.ToUpper()</param>
            <returns></returns>
        </member>
        <member name="T:EmitMapper.MappingConfiguration.MappingOperations.ReadWriteComplex">
            <summary>
            Generates the following code:
            var tempSrc = Source.member;
            if(tempSrc == null)
            {
                Destination.member = null;
            }
            else
            {
                var tempDst = Destination.member;
                if(tempDst == null)
                {
                    tempDst = new DestinationMemberType();
                }
                // Operations:
                tempDst.fld1 = tempSrc.fld1;
                tempDst.fld2 = tempSrc.fld2;
                ...
                Destination.member = tempDst;
            }
            </summary>
        </member>
        <member name="T:EmitMapper.ObjectMapperManager">
            <summary>
            Class for maintaining and generating Mappers.
            </summary>
        </member>
        <member name="M:EmitMapper.ObjectMapperManager.GetMapper``2">
            <summary>
            Returns a Mapper instance for specified types.
            </summary>
            <typeparam name="TFrom">Type of source object</typeparam>
            <typeparam name="TTo">Type of destination object</typeparam>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.ObjectMapperManager.GetMapper``2(EmitMapper.IMappingConfigurator)">
            <summary>
            Returns a Mapper instance for specified types.
            </summary>
            <typeparam name="TFrom">Type of source object</typeparam>
            <typeparam name="TTo">Type of destination object</typeparam>
            <param name="mappingConfigurator">Object which configures mapping.</param>
            <returns>Mapper</returns>
        </member>
        <member name="M:EmitMapper.ObjectMapperManager.GetMapperImpl(System.Type,System.Type,EmitMapper.IMappingConfigurator)">
            <summary>
            Returns a mapper implementation instance for specified types.
            </summary>
            <param name="from">Type of source object</param>
            <param name="to">Type of destination object</param>
            <param name="mappingConfigurator">Object which configures mapping.</param>
            <returns>Mapper</returns>
        </member>
        <member name="T:Dos.Common.CacheHelper">
            <summary>
            缓存处理类
            </summary>
        </member>
        <member name="F:Dos.Common.CacheHelper.cache">
            <summary>
            cache
            </summary>
        </member>
        <member name="F:Dos.Common.CacheHelper._timeOut">
            <summary>
            timeout 600秒
            </summary>
        </member>
        <member name="M:Dos.Common.CacheHelper.Set(System.String,System.Object)">
            <summary>
            添加缓存 (绝对有效期)
            </summary>
            <param name="cacheKey">缓存键值</param>
            <param name="cacheValue">缓存内容</param>
        </member>
        <member name="M:Dos.Common.CacheHelper.Set(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存 (绝对有效期)
            </summary>
            <param name="cacheKey">缓存键值</param>
            <param name="cacheValue">缓存内容</param>
            <param name="timeout">绝对有效期（单位: 秒）</param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheSlidingExpiration(System.String,System.Object)">
            <summary>
            添加缓存 (相对有效期)
            </summary>
            <param name="cacheKey">缓存键值</param>
            <param name="cacheValue">缓存内容</param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheSlidingExpiration(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存 (相对有效期)
            </summary>
            <param name="cacheKey">缓存键值</param>
            <param name="cacheValue">缓存内容</param>
            <param name="timeout">相对过期时间 (单位: 秒)</param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheFilesDependency(System.String,System.Object,System.String[])">
            <summary>
            添加缓存 (文件依赖)
            </summary>
            <param name="cacheKey">缓存键值</param>
            <param name="cacheValue">缓存内容</param>
            <param name="filenames">缓存依赖的文件或目录</param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheDependency(System.String,System.Object,System.Int32,System.Web.Caching.CacheDependency)">
            <summary>
            添加缓存 (文件依赖)
            </summary>
            <param name="cacheKey">缓存键值</param>
            <param name="cacheValue">缓存内容</param>
            <param name="timeout">绝对过期时间 （单位：秒）</param>
            <param name="dep">缓存依赖</param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheKeysDependency(System.String,System.Object,System.String[])">
            <summary>
            添加缓存 (一组键值依赖)
            </summary>
            <param name="cacheKey">缓存键值</param>
            <param name="cacheValue">缓存内容</param>
            <param name="cachekeys">一组缓存键，此改变缓存也失效</param>
        </member>
        <member name="M:Dos.Common.CacheHelper.onRemove(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            缓存删除的委托实例
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Dos.Common.CacheHelper.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="cacheKey">缓存键值</param>
        </member>
        <member name="M:Dos.Common.CacheHelper.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="cacheKey">对象的关键字</param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CacheHelper.GetCount">
            <summary>
            获取缓存数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CacheHelper.GetKeys">
            <summary>
            返回缓存键值列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CacheHelper.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="T:Dos.Common.CmdHelper">
            <summary>
            Dos cmd命令执行帮助类
            </summary>
        </member>
        <member name="M:Dos.Common.CmdHelper.Run(System.String)">
            <summary>
            运行dos命令
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.ConvertHelper">
            <summary>
            通用转换类
            </summary>
        </member>
        <!-- 对于成员“M:Dos.Common.ConvertHelper.EnumToDictionary(System.Type)”忽略有格式错误的 XML 注释 -->
        <member name="T:Dos.Common.CookieHelper">
            <summary>
            Cookie操作类
            </summary>
        </member>
        <member name="M:Dos.Common.CookieHelper.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="cookieName"></param>
        </member>
        <member name="M:Dos.Common.CookieHelper.RemoveDefault">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.CookieHelper.Get(System.String)">
            <summary>
            
            </summary>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CookieHelper.Get(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fatherCookieName"></param>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CookieHelper.Set(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="cookieName"></param>
            <param name="cookieValue"></param>
            <param name="expires">设置cookie过期时间，单位：秒。</param>
        </member>
        <member name="M:Dos.Common.EncryptHelper.DESEncode(System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Dos.Common.EncryptHelper.DESDecode(System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:Dos.Common.EncryptHelper.MD5Encrypt(System.String,System.Int32)">
            <summary>
            MD5加密，返回MD5 16位或32位加密后的字符串，默认返回16位。code输入16或32
            </summary>
            <param name="str">原始字符串</param>
            <param name="code">MD5返回16位还是32位？请输入16或32</param>
        </member>
        <member name="M:Dos.Common.EncryptHelper.MD5Encrypt(System.String)">
            <summary>
            MD5加密，返回MD5 16位或32位加密后的字符串，默认返回16位。
            </summary>
            <param name="str">原始字符串</param>
        </member>
        <member name="T:Dos.Common.FileHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.FileHelper.GetText(System.String)">
            <summary>
            从文件中读取所有内容。（如果文件不存在，返回空字符串）
            </summary>
            <param name="filePath">完整路径，如D:\Temp\Temp.json</param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.IPHelper">
            <summary>
            IP帮助类
            </summary>
        </member>
        <member name="M:Dos.Common.IPHelper.GetVisitorIP">
            <summary>
            获取访问者IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.HttpHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.HttpHelper.GetStream(System.String,System.String,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            Get方式获取响应流
            </summary>
            <param name="url"></param>
            <param name="queryString"></param>
            <param name="timeOut">单位：秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.GetStream(System.String,Dos.Common.HttpParam,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="param"></param>
            <param name="timeOut">单位：秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get``1(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get(System.String,System.String,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
             Get方式获取字符串
            </summary>
            <param name="url"></param>
            <param name="queryString"></param>
            <param name="timeOut">单位：秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get(System.String,Dos.Common.HttpParam,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            Get方式获取字符串
            </summary>
            <param name="url"></param>
            <param name="param"></param>
            <param name="timeOut">单位：秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get``1(System.String,Dos.Common.HttpParam,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="param"></param>
            <param name="timeOut">单位：秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get``1(System.String,System.String,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="queryString"></param>
            <param name="timeOut">单位秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.PostStream(System.String,System.String,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            Post方式获取响应流
            </summary>
            <param name="url"></param>
            <param name="param"></param>
            <param name="timeOut">单位：秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Post(System.String,Dos.Common.HttpParam,Dos.Common.HttpParam,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            以post方式提交，将响应编码为字串。
            </summary>
            <param name="url"></param>
            <param name="param"></param>
            <param name="getParam"></param>
            <param name="timeOut">单位：秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Post(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.HttpHelper.Post``1(System.String)">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“M:Dos.Common.HttpHelper.Post(System.String,System.String,System.String,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Dos.Common.HttpHelper.Post``1(System.String,System.String,System.String,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="param"></param>
            <param name="getParam"></param>
            <param name="timeOut">单位：秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.CreateRequest(System.String)">
            <summary>
            创建一个请求
            </summary>
        </member>
        <member name="M:Dos.Common.HttpHelper.Upload(System.String,Dos.Common.HttpParam,System.String)">
            <summary>
            上传文件。formData参数附加到url
            </summary>
        </member>
        <member name="M:Dos.Common.HttpHelper.HeadHttpCode(System.String,System.String,System.Int32,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="timeOut">单位：秒</param>
            <param name="encoding"></param>
            <param name="cc"></param>
            <param name="refer"></param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.HttpParam">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.HttpParam.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Dos.Common.HttpParam.Format">
            <summary>
            转换为http form格式字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.LogHelper">
            <summary>
            日志帮助类。web.config-AppSettings可以配置DosLogHelperDebug=0或DosLogHelperError=0来关闭日志记录。
            如果不传入path参数，默认是在~/Log/下生成日志文件，也可以web.config-AppSettings配置DosLogHelperPath来设置默认日志文件路径，格式：D;\\File\\Log\\。
            </summary>
        </member>
        <member name="M:Dos.Common.LogHelper.Debug(System.String,System.String,System.String)">
            <summary>
            记录调试日志
            </summary>
            <param name="content"></param>
            <param name="filePrefixName"></param>
            <param name="path">格式：D:\\File\\Logs\\</param>
        </member>
        <member name="M:Dos.Common.LogHelper.Error(System.String,System.String,System.String)">
            <summary>
            记录错误日志
            </summary>
            <param name="content"></param>
            <param name="filePrefixName"></param>
            <param name="path">格式：D:\\File\\Logs\\</param>
        </member>
        <member name="M:Dos.Common.LogHelper.Write(Dos.Common.LogHelper.LogHelperType,System.String,System.String,System.String)">
            <summary>
            filePrefixName是文件名前缀，最好用中文，方便在程序Logs文件下查看。
            </summary>
            <param name="content"></param>
            <param name="filePrefixName"></param>
            <param name="path"></param>
            <param name="logtype"></param>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsMacAddress(System.String)">
            <summary>
            判断是否是mac地址
            </summary>
            <param name="MAC">mac地址字符串</param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.Length(System.String)">
            <summary>
            获取字节数
            str：需要获取的字符串
            </summary>
        </member>
        <member name="M:Dos.Common.RegexHelper.SubString(System.String,System.Int32)">
            <summary>
            按字节数截取指定字节
            </summary>
            <param name="str">需要获取的字符串</param>
            <param name="length">获取的字节长度</param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.ImageHelper">
            <summary>
            图片水印处理类
            </summary>
        </member>
        <member name="M:Dos.Common.ImageHelper.GetImageFormat(System.String)">
            <summary>
            获取图片格式。
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.ImageHelper.MakeWaterImage(System.IO.Stream,System.String,System.String,System.String,System.Int32,Dos.Common.ImageHelper.WaterPositionOption)">
            <summary>
            加水印图片并保存。
            </summary>
            <param name="originalImageStream">Stream</param>
            <param name="strFileName">源图路径（物理路径）</param>
            <param name="savePath">图片保存路径（物理路径）</param>
            <param name="waterPath">水印图路径（物理路径）</param>
            <param name="edge">水印图离原图边界的距离</param>
            <param name="position">加图片水印的位置</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Dos.Common.ImageHelper.MakeThumbnail(System.IO.Stream,System.String,System.String,System.Int32,System.Int32,Dos.Common.ImageHelper.ThumbnailModeOption)">
            <summary>
            生成缩略图并保存。
            </summary>
            <param name="originalImageStream">Stream</param>
            <param name="strFileName">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="maxWidth">缩略图最大宽度</param>
            <param name="maxheight">缩略图最大高度</param>
            <param name="mode">生成缩略图的方式</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Dos.Common.ImageHelper.MakeThumbnailWater(System.IO.Stream,System.String,System.String,System.Int32,System.Int32,Dos.Common.ImageHelper.ThumbnailModeOption,System.String,System.Int32,Dos.Common.ImageHelper.WaterPositionOption)">
            <summary>
            生成缩略图并打水印再保存。
            </summary>
            <param name="originalImageStream">Stream</param>
            <param name="strFileName">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="maxWidth">缩略图最大宽度</param>
            <param name="maxheight">缩略图最大高度</param>
            <param name="mode">生成缩略图的方式</param>
            <param name="waterPath">水印图路径（物理路径）</param>
            <param name="edge">水印图离原图边界的距离</param>
            <param name="position">加图片水印的位置</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:Dos.Common.ImageHelper.ThumbnailModeOption">
            <summary>
            生成缩略图的模式， WH-指定宽高缩放（可能变形） W-指定宽，高按比例  H-指定高，宽按比例 CUT-指定高宽裁减（不变形,推荐用这个）。
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.ThumbnailModeOption.WH">
            <summary>
            指定宽高缩放（可能变形）
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.ThumbnailModeOption.W">
            <summary>
            指定宽，高按比例
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.ThumbnailModeOption.H">
            <summary>
            指定高，宽按比例
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.ThumbnailModeOption.CUT">
            <summary>
            指定高宽裁减（不变形,推荐用这个）
            </summary>
        </member>
        <member name="T:Dos.Common.ImageHelper.WaterPositionOption">
            <summary>
            加图片水印的位置，TopLeft-左上角 TopCenter-上中间 TopRight-右上角 BottomLeft-左下角 BottomCenter-下中间 右下角-右下角 Middle-正中间。
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.LeftTop">
            <summary>
            左上角
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.CenterTop">
            <summary>
            上中间
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.RightTop">
            <summary>
            右上角
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.LeftBottom">
            <summary>
            左下角
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.CenterBottom">
            <summary>
            下中间
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.RightBottom">
            <summary>
            右下角
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.Middle">
            <summary>
            正中间
            </summary>
        </member>
        <member name="T:Dos.Common.BaseResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="isSuccess"></param>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor(System.Boolean,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="isSuccess"></param>
            <param name="data"></param>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor(System.Boolean,System.Object,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="isSuccess"></param>
            <param name="data"></param>
            <param name="message"></param>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor(System.Boolean,System.Object,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="isSuccess"></param>
            <param name="data"></param>
            <param name="message"></param>
            <param name="dataCount"></param>
        </member>
        <member name="P:Dos.Common.BaseResult.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Dos.Common.BaseResult.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Dos.Common.BaseResult.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Dos.Common.BaseResult.DataCount">
            <summary>
            数量数量
            </summary>
        </member>
        <member name="T:Dos.Common.XLinqHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AllElements(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AllElements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AnyAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AnyElement(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AnyElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AssertElementHasValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.FirstElement(System.Xml.Linq.XElement)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetBool(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetBoolOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetDateTime(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetDateTimeOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetDecimal(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetDecimalOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetElementValueOrDefault``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetGuid(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetGuidOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetInt(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetIntOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetLong(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetLongOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableBool(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableDateTime(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableDecimal(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableGuid(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableInt(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableLong(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableTimeSpan(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetString(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetTimeSpan(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetTimeSpanOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dos.Common.QueueHelper.SleepNumber">
            <summary>
            睡眠时间（毫秒）
            </summary>
        </member>
        <member name="M:Dos.Common.QueueHelper.Join(System.String)">
            <summary>
            加入队列
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.QueueHelper.Join(System.String,System.Object)">
            <summary>
            加入队列。
            </summary>
            <param name="key">资源Key</param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.QueueHelper.TryGet(System.String,System.Object)">
            <summary>
            抢资源
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.QueueHelper.Free(System.String)">
            <summary>
            释放资源
            </summary>
            <param name="key"></param>
        </member>
    </members>
</doc>
